{"ast":null,"code":"class node {\n  constructor(val) {\n    this.val = val;\n    this.next = null;\n  }\n\n}\n\nfunction linkedList() {\n  var linkedlist = [];\n  let head = new node(1);\n  linkedlist.push(head);\n  let tmp1 = head;\n  let i = 2;\n\n  while (i <= 5) {\n    let tmp2 = new node(i);\n    tmp1.next = tmp2;\n    linkedlist.push(tmp2);\n    tmp1 = tmp1.next;\n    i++;\n  }\n\n  let tmp2 = new node('null');\n  tmp1.next = tmp2;\n  linkedlist.push(tmp2);\n  return linkedlist;\n}\n\nfunction serialize(linkedlist) {\n  let list = {};\n  linkedlist.forEach(node => {\n    if (node.val !== 'null') list[node.val] = node.next.val;else list[node.val] = '';\n  });\n  return list;\n}\n\nexport { node, linkedList, serialize };","map":{"version":3,"sources":["/Users/karthikkalyanaraman/reactive-algorithms/src/linkedList.js"],"names":["node","constructor","val","next","linkedList","linkedlist","head","push","tmp1","i","tmp2","serialize","list","forEach"],"mappings":"AAAA,MAAMA,IAAN,CAAW;AACTC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACf,SAAKA,GAAL,GAAWA,GAAX;AACA,SAAKC,IAAL,GAAY,IAAZ;AACD;;AAJQ;;AAOX,SAASC,UAAT,GAAsB;AACpB,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAIC,IAAI,GAAG,IAAIN,IAAJ,CAAS,CAAT,CAAX;AACAK,EAAAA,UAAU,CAACE,IAAX,CAAgBD,IAAhB;AACA,MAAIE,IAAI,GAAGF,IAAX;AACA,MAAIG,CAAC,GAAG,CAAR;;AACA,SAAOA,CAAC,IAAI,CAAZ,EAAe;AACb,QAAIC,IAAI,GAAG,IAAIV,IAAJ,CAASS,CAAT,CAAX;AACAD,IAAAA,IAAI,CAACL,IAAL,GAAYO,IAAZ;AACAL,IAAAA,UAAU,CAACE,IAAX,CAAgBG,IAAhB;AACAF,IAAAA,IAAI,GAAGA,IAAI,CAACL,IAAZ;AACAM,IAAAA,CAAC;AACF;;AACD,MAAIC,IAAI,GAAG,IAAIV,IAAJ,CAAS,MAAT,CAAX;AACAQ,EAAAA,IAAI,CAACL,IAAL,GAAYO,IAAZ;AACAL,EAAAA,UAAU,CAACE,IAAX,CAAgBG,IAAhB;AACA,SAAOL,UAAP;AACD;;AAED,SAASM,SAAT,CAAmBN,UAAnB,EAA+B;AAC7B,MAAIO,IAAI,GAAG,EAAX;AACAP,EAAAA,UAAU,CAACQ,OAAX,CAAmBb,IAAI,IAAI;AACzB,QAAGA,IAAI,CAACE,GAAL,KAAa,MAAhB,EAAwBU,IAAI,CAACZ,IAAI,CAACE,GAAN,CAAJ,GAAiBF,IAAI,CAACG,IAAL,CAAUD,GAA3B,CAAxB,KACKU,IAAI,CAACZ,IAAI,CAACE,GAAN,CAAJ,GAAiB,EAAjB;AACN,GAHD;AAIA,SAAOU,IAAP;AACD;;AAED,SAAUZ,IAAV,EAAgBI,UAAhB,EAA4BO,SAA5B","sourcesContent":["class node {\n  constructor(val) {\n    this.val = val;\n    this.next = null;\n  }\n}\n\nfunction linkedList() {\n  var linkedlist = []\n  let head = new node(1);\n  linkedlist.push(head);\n  let tmp1 = head;\n  let i = 2;\n  while (i <= 5) {\n    let tmp2 = new node(i);\n    tmp1.next = tmp2;\n    linkedlist.push(tmp2);\n    tmp1 = tmp1.next;\n    i++;\n  }\n  let tmp2 = new node('null');\n  tmp1.next = tmp2;\n  linkedlist.push(tmp2);\n  return linkedlist\n}\n\nfunction serialize(linkedlist) {\n  let list = {};\n  linkedlist.forEach(node => {\n    if(node.val !== 'null') list[node.val] = node.next.val;\n    else list[node.val] = ''\n  });\n  return list\n}\n\nexport  { node, linkedList, serialize }"]},"metadata":{},"sourceType":"module"}